//go:build !desktop
// +build !desktop

package main

import (
	"github.com/kishansakhiya/wails-demo/backend/app/config"
	"github.com/kishansakhiya/wails-demo/backend/app/routes"
	"log"
	"os"
	"os/signal"
	"syscall"

	_ "github.com/kishansakhiya/wails-demo/backend/docs" // This is generated by swag

	"github.com/gin-gonic/gin"
)

// @title           System Benchmark API
// @version         1.0
// @description     A comprehensive API for retrieving system information including CPU, GPU, memory, disk, and hardware details.
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html

// @host      localhost:7000

// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization
func main() {
	// Load configuration
	cfg := config.LoadConfig()

	// Set Gin mode based on configuration
	gin.SetMode(cfg.Server.Mode)

	// Create a new Gin router
	r := gin.New()

	// Setup API routes
	routes.SetupRoutes(r)

	// Create server address
	serverAddr := cfg.GetServerAddress()

	// Log startup information
	log.Printf("Starting System Benchmark API server on %s", serverAddr)
	log.Printf("Server mode: %s", cfg.Server.Mode)
	log.Printf("Cache enabled: %v (TTL: %ds)", cfg.Cache.Enabled, cfg.Cache.TTL)
	log.Printf("Rate limiting enabled: %v (%d requests per %ds)",
		cfg.RateLimit.Enabled, cfg.RateLimit.Limit, cfg.RateLimit.Window)

	// Setup graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

	go func() {
		if err := r.Run(serverAddr); err != nil {
			log.Fatal("Failed to start server:", err)
		}
	}()

	// Wait for interrupt signal
	<-quit
	log.Println("Shutting down server...")
}
